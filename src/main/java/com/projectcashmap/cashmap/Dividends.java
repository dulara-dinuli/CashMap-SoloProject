/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.projectcashmap.cashmap;

import com.toedter.calendar.JDateChooser;
import java.awt.Component;
import java.awt.Dimension;
import java.lang.reflect.Field;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author dular
 */
 
public class Dividends extends javax.swing.JFrame {

    private List<TotalDividendsObserver> observers = new ArrayList<>();
    
    // Method to register observers
    public void addObserver(TotalDividendsObserver observer) {
        observers.add(observer);
    }

    // Method to unregister observers
    public void removeObserver(TotalDividendsObserver observer) {
        observers.remove(observer);
    }

    // Method to notify observers
    private void notifyObservers(double totalDividends) {
        for (TotalDividendsObserver observer : observers) {
            observer.updateTotalDividends(totalDividends);
        }
    }
    
    /**
     * Creates new form Dividends
     */
    public Dividends() {
        initComponents();
    }

    // Method to save data from text fields
    private void saveStockMarketDataToPreferences() {
        // Get the data from text fields

        String dividendsVariable = totalDividends.getText();

        // Concatenate the data into a single string with a delimiter (e.g., comma)
        String dataToSave = dividendsVariable;

        // Save the data using the DataStorage class
        NewDataStorage.newSaveData(dataToSave);
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelGradient1 = new panel.PanelGradient();
        jScrollPane2 = new javax.swing.JScrollPane();
        dividendsTable = new javax.swing.JTable();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        totalDividends = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dividends");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panelGradient1.setBackground(new java.awt.Color(245, 239, 255));
        panelGradient1.setGradientType(panel.PanelGradient.GradientType.DIAGONAL_2);

        dividendsTable.setBackground(new java.awt.Color(255, 255, 255));
        dividendsTable.setForeground(new java.awt.Color(51, 51, 51));
        dividendsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        dividendsTable.setFillsViewportHeight(true);
        dividendsTable.setGridColor(new java.awt.Color(255, 255, 255));
        dividendsTable.setRowHeight(40);
        dividendsTable.setSelectionBackground(new java.awt.Color(100, 110, 200));
        dividendsTable.setSelectionForeground(new java.awt.Color(51, 51, 51));
        jScrollPane2.setViewportView(dividendsTable);

        panelGradient1.add(jScrollPane2);
        jScrollPane2.setBounds(20, 20, 1030, 490);

        add.setBackground(new java.awt.Color(33, 35, 96));
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        panelGradient1.add(add);
        add.setBounds(770, 580, 76, 27);

        update.setBackground(new java.awt.Color(33, 35, 96));
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        panelGradient1.add(update);
        update.setBounds(870, 580, 76, 27);

        delete.setBackground(new java.awt.Color(33, 35, 96));
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        panelGradient1.add(delete);
        delete.setBounds(970, 580, 76, 27);

        totalDividends.setBackground(new java.awt.Color(247, 247, 247));
        totalDividends.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        totalDividends.setForeground(new java.awt.Color(81, 81, 81));
        totalDividends.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalDividends.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 255, 255), new java.awt.Color(255, 255, 255), new java.awt.Color(191, 191, 191), new java.awt.Color(255, 255, 255)));
        totalDividends.setOpaque(true);
        panelGradient1.add(totalDividends);
        totalDividends.setBounds(770, 510, 280, 40);

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(96, 96, 96));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Total Dividends");
        panelGradient1.add(jLabel10);
        jLabel10.setBounds(610, 520, 160, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelGradient1, javax.swing.GroupLayout.DEFAULT_SIZE, 1069, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelGradient1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // Insert data to the database
        int selectedRow = dividendsTable.getSelectedRow();

        try {
            DatabaseConnection.getInstance().connectToDatabase();

            // Get values from the table row and handle null values
            String code = dividendsTable.getValueAt(selectedRow, 1).toString();
            String dateString = dividendsTable.getValueAt(selectedRow, 2).toString();
            double amount = getDoubleValue(dividendsTable.getValueAt(selectedRow, 3));

            // Convert the date String to java.sql.Date using SimpleDateFormat
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date utilDate = dateFormat.parse(dateString);
            java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());

            // Prepare and execute the SQL insert statement
            String sql = "INSERT INTO dividends (dividends_code, dividends_date, dividends_amount) VALUES (?, ?, ?)";
            PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);
            p.setString(1, code);
            p.setDate(2, sqlDate);
            p.setDouble(3, amount);

            boolean r = p.execute();
            if (!r) {
                JOptionPane.showMessageDialog(this, "Inserted.");
                formWindowOpened(null);

            } else {
                JOptionPane.showMessageDialog(this, "Error! Try Again.");
            }

            p.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        }

        // Helper method to handle null values and convert to double
        private double getDoubleValue(Object value) {
            if (value == null) {
                return 0;
            }
            try {
                return Double.parseDouble(value.toString());
            } catch (NumberFormatException e) {
                return 0;
            }
    }//GEN-LAST:event_addActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // update selected data

        int id= Integer.parseInt(dividendsTable.getValueAt(dividendsTable.getSelectedRow(),0).toString());
        try {
            DatabaseConnection.getInstance().connectToDatabase();
            String sql = "update dividends set dividends_code='"+dividendsTable.getValueAt(dividendsTable.getSelectedRow(),1)+"',"
            +"dividends_date='"+dividendsTable.getValueAt(dividendsTable.getSelectedRow(),2)+"',"
            +"dividends_amount='"+dividendsTable.getValueAt(dividendsTable.getSelectedRow(),3)+"' where dividends_id='"+id+"'";
            PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);

            int c = JOptionPane.showConfirmDialog(this, "Are you sure you want to change?","",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
            if(c==0){
                boolean r = p.execute();
                if(!r){
                    JOptionPane.showMessageDialog(this, "Updated");
                    formWindowOpened(null);
                }else{
                    JOptionPane.showMessageDialog(this, "Error! Try Again.");
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // delete the selected data
        int id= Integer.parseInt(dividendsTable.getValueAt(dividendsTable.getSelectedRow(),0).toString());
        try {
            DatabaseConnection.getInstance().connectToDatabase();
            String sql = "delete FROM dividends where dividends_id="+"'"+id+"'";
            PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);

            int c = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?","Warning",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(c==0){
                if(!p.execute()){
                    formWindowOpened(null);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // add data to the Assets Growth Table
        try {
            DatabaseConnection.getInstance().connectToDatabase();
            String sql = "SELECT * FROM dividends order by dividends_date ASC";
            PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);
            ResultSet r = p.executeQuery();

            // Create a list to hold the data rows with the additional column
            List<String[]> rowData = new ArrayList<>();

            double dividendsTotal =0;
            
            while (r.next()) {
                int id = r.getInt("dividends_id");
                String code = r.getString("dividends_code");
                Date date = r.getDate("dividends_date");
                double amount = r.getDouble("dividends_amount");     
                
                dividendsTotal+=amount;
                
                rowData.add(new String[]{String.valueOf(id), code, String.valueOf(date), String.valueOf(amount)});
            }

            String[] columnName = {"ID", "Code", "Date", "Amount"}; 
            DefaultTableModel model = (DefaultTableModel) dividendsTable.getModel();
            model.setDataVector(rowData.toArray(new String[0][]), columnName);
            
            // Hide the "ID" column by setting its width to 0
            TableColumn idColumn = dividendsTable.getColumnModel().getColumn(0);
            idColumn.setMinWidth(0);
            idColumn.setMaxWidth(0);
            idColumn.setPreferredWidth(0);
            idColumn.setResizable(false);
            
            // Add an empty row
            String[] emptyRow = {"", "", "", ""};
            //rowData.add(emptyRow);
            model.addRow(emptyRow);
            
            dividendsTable.getColumnModel().getColumn(2).setCellEditor(new JDateChooserEditor(new JCheckBox()));

            totalDividends.setText(String.valueOf(dividendsTotal));
            
            // Notify observers
            notifyObservers(dividendsTotal);
            
            saveStockMarketDataToPreferences();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dividends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dividends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dividends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dividends.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dividends().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton delete;
    private javax.swing.JTable dividendsTable;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JScrollPane jScrollPane2;
    private panel.PanelGradient panelGradient1;
    private javax.swing.JLabel totalDividends;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}

class JDateChooserEditor extends DefaultCellEditor{
  
  private JDateChooser dateChooser;
  public JDateChooserEditor(JCheckBox checkBox)
  {
    super(checkBox);
    dateChooser = new JDateChooser();
    dateChooser.setDateFormatString("yyyy-MM-dd");
    
  }

  JDateChooser date;
  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) 
  {
        if (value instanceof String) {
            try {
                dateChooser.setDate(new java.text.SimpleDateFormat("yyyy-MM-dd").parse((String) value));
            } catch (java.text.ParseException e) {
                e.printStackTrace();
            }
        }
        return dateChooser;
  }

  public Object getCellEditorValue() 
  {
            if (dateChooser.getDate() != null) {
            return new java.text.SimpleDateFormat("yyyy-MM-dd").format(dateChooser.getDate());
        } else {
            return super.getCellEditorValue();
        }
  }

    public boolean stopCellEditing() {
        if (dateChooser.getDate() != null) {
            return super.stopCellEditing();
        } else {
            return false;
        }
    }

  protected void fireEditingStopped() {
    super.fireEditingStopped();
  }
}

class CustomJDateChooser extends JDateChooser {

    public CustomJDateChooser() {
        super();
    }

    public CustomJDateChooser(String dateFormat) {
        super();
        this.setDateFormatString(dateFormat);
    }

    public Dimension getCalendarPreferredSize() {
        return new Dimension(300, 200); // Customize the size as per your requirement
    }

    @Override
    public void setPreferredSize(Dimension preferredSize) {
        super.setPreferredSize(preferredSize);

        // Modify the preferred size of the popup calendar
        try {
            Field popupField = JDateChooser.class.getDeclaredField("datePopupMenu");
            popupField.setAccessible(true);
            JPopupMenu popupMenu = (JPopupMenu) popupField.get(this);
            if (popupMenu != null) {
                popupMenu.setPreferredSize(preferredSize);
                popupMenu.setMaximumSize(preferredSize);
            }
        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
    }
}

class NewDataStorage {
    private static final String NEW_PREFERENCE_KEY = "dividendsValues";

    public static void newSaveData(String data) {
        Preferences preferences = Preferences.userRoot().node("com.projectcashmap.cashmap");
        preferences.put(NEW_PREFERENCE_KEY, data);
    }

    public static String newLoadData() {
        Preferences preferences = Preferences.userRoot().node("com.projectcashmap.cashmap");
        return preferences.get(NEW_PREFERENCE_KEY, null);
    }
}