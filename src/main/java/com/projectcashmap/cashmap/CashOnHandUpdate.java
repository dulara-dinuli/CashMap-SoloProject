/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.projectcashmap.cashmap;

import chart.ModelChart;
import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.lang.reflect.Field;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author dular
 */

interface CashOnHandUpdateObserver {
    void updateCashOnHandTable();
}

public class CashOnHandUpdate extends javax.swing.JFrame {
    
    private List<CashOnHandUpdateObserver> observers = new ArrayList<>();
    
    // Method to register observers
    public void addObserver(CashOnHandUpdateObserver observer) {
        observers.add(observer);
    }

    // Method to unregister observers
    public void removeObserver(CashOnHandUpdateObserver observer) {
        observers.remove(observer);
    }

    // Method to notify observers
    private void notifyObservers() {
        for (CashOnHandUpdateObserver observer : observers) {
            observer.updateCashOnHandTable();
        }
    }
    
    /**
     * Creates new form CashOnHandUpdate
     */
    public CashOnHandUpdate() {
        initComponents();
        
        // create the line chart
        cashOnHandChart.setTitle("Total Cash On Hand");
        cashOnHandChart.addLegend("Amount (LKR)", Color.decode("#ac82ff"), Color.decode("#1b004f"));
        lineChart();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cashOnHandUpdate = new javax.swing.JPanel();
        cashOnHandChart = new chart.CurveLineChart();
        delete = new javax.swing.JButton();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        cashOnHandUpdateTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Update Cash On Hand");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        cashOnHandUpdate.setBackground(new java.awt.Color(255, 255, 255));
        cashOnHandUpdate.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));

        cashOnHandChart.setForeground(new java.awt.Color(102, 102, 102));
        cashOnHandChart.setFillColor(true);

        delete.setBackground(new java.awt.Color(77, 0, 137));
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        add.setBackground(new java.awt.Color(77, 0, 137));
        add.setForeground(new java.awt.Color(255, 255, 255));
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(77, 0, 137));
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        cashOnHandUpdateTable.setBackground(new java.awt.Color(255, 255, 255));
        cashOnHandUpdateTable.setForeground(new java.awt.Color(51, 51, 51));
        cashOnHandUpdateTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        cashOnHandUpdateTable.setFillsViewportHeight(true);
        cashOnHandUpdateTable.setGridColor(new java.awt.Color(255, 255, 255));
        cashOnHandUpdateTable.setRowHeight(40);
        cashOnHandUpdateTable.setSelectionBackground(new java.awt.Color(230, 179, 255));
        cashOnHandUpdateTable.setSelectionForeground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setViewportView(cashOnHandUpdateTable);

        javax.swing.GroupLayout cashOnHandUpdateLayout = new javax.swing.GroupLayout(cashOnHandUpdate);
        cashOnHandUpdate.setLayout(cashOnHandUpdateLayout);
        cashOnHandUpdateLayout.setHorizontalGroup(
            cashOnHandUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cashOnHandUpdateLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addGroup(cashOnHandUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cashOnHandChart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1024, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cashOnHandUpdateLayout.createSequentialGroup()
                        .addComponent(add)
                        .addGap(37, 37, 37)
                        .addComponent(update)
                        .addGap(33, 33, 33)
                        .addComponent(delete)))
                .addContainerGap())
            .addGroup(cashOnHandUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(cashOnHandUpdateLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1025, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        cashOnHandUpdateLayout.setVerticalGroup(
            cashOnHandUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cashOnHandUpdateLayout.createSequentialGroup()
                .addComponent(cashOnHandChart, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 305, Short.MAX_VALUE)
                .addGroup(cashOnHandUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(update)
                    .addComponent(delete)
                    .addComponent(add))
                .addContainerGap())
            .addGroup(cashOnHandUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(cashOnHandUpdateLayout.createSequentialGroup()
                    .addGap(267, 267, 267)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(43, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cashOnHandUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cashOnHandUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lineChart() {

        try {
            List<modelCashOnHandChart> lists = new ArrayList<>();
            DatabaseConnection.getInstance().connectToDatabase();
            String sql = "SELECT cashonhandupdate_date AS `Date`, (IFNULL(cashonhand_5000, 0) * 5000 + IFNULL(cashonhand_2000, 0) * 2000 + "
                    + "IFNULL(cashonhand_1000, 0) * 1000 + IFNULL(cashonhand_500, 0) * 500 + IFNULL(cashonhand_100, 0) * 100 + "
                    + "IFNULL(cashonhand_50, 0) * 50 + IFNULL(cashonhand_20, 0) * 20) AS Total FROM cashonhandupdate ORDER BY cashonhandupdate_date DESC;";
            PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);
            ResultSet r = p.executeQuery();
            while (r.next()) {
                Date date = r.getDate("Date");
                int amount = r.getInt("Total");
                
                lists.add(new modelCashOnHandChart(date, amount));
            }
        
            //  Add Data to chart
            for (int i = lists.size() - 1; i >= 0; i--) {
                modelCashOnHandChart d = lists.get(i);
                cashOnHandChart.addData(new ModelChart(String.valueOf(d.getDate()), new double[]{d.getAmount()}));
            }
            //  Start to show data with animation
            cashOnHandChart.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }    
    
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // Insert data to the database
        int selectedRow = cashOnHandUpdateTable.getSelectedRow();

        try {
        DatabaseConnection.getInstance().connectToDatabase();

        // Get values from the table row and handle null values
        String dateString = cashOnHandUpdateTable.getValueAt(selectedRow, 1).toString();
        String description = cashOnHandUpdateTable.getValueAt(selectedRow, 2).toString();
        int note5000 = getIntValue(cashOnHandUpdateTable.getValueAt(selectedRow, 3));
        int note2000 = getIntValue(cashOnHandUpdateTable.getValueAt(selectedRow, 4));
        int note1000 = getIntValue(cashOnHandUpdateTable.getValueAt(selectedRow, 5));
        int note500 = getIntValue(cashOnHandUpdateTable.getValueAt(selectedRow, 6));
        int note100 = getIntValue(cashOnHandUpdateTable.getValueAt(selectedRow, 7));
        int note50 = getIntValue(cashOnHandUpdateTable.getValueAt(selectedRow, 8));
        int note20 = getIntValue(cashOnHandUpdateTable.getValueAt(selectedRow, 9));

        // Convert the date String to java.sql.Date using SimpleDateFormat
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date utilDate = dateFormat.parse(dateString);
        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());

        // Prepare and execute the SQL insert statement
        String sql = "INSERT INTO cashonhandupdate (cashonhandupdate_date, cashonhand_description, cashonhand_5000, "
                + "cashonhand_2000, cashonhand_1000, cashonhand_500, cashonhand_100, cashonhand_50, cashonhand_20) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);
        p.setDate(1, sqlDate);
        p.setString(2, description);
        p.setInt(3, note5000);
        p.setInt(4, note2000);
        p.setInt(5, note1000);
        p.setInt(6, note500);
        p.setInt(7, note100);
        p.setInt(8, note50);
        p.setInt(9, note20);

        boolean r = p.execute();
        if (!r) {
            JOptionPane.showMessageDialog(this, "Inserted.");
            formWindowOpened(null);
            cashOnHandChart.clear();
            lineChart();  
            
        } else {
            JOptionPane.showMessageDialog(this, "Error! Try Again.");
        }

        p.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Helper method to handle null values and convert to int
    private int getIntValue(Object value) {
        if (value == null) {
            return 0;
        }
        try {
            return Integer.parseInt(value.toString());
        } catch (NumberFormatException e) {
            return 0;
        }
    }//GEN-LAST:event_addActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // update selected data

        int id= Integer.parseInt(cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),0).toString());
        try {
            DatabaseConnection.getInstance().connectToDatabase();
            String sql = "update cashonhandupdate set cashonhandupdate_date='"+cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),1)+"',"
            +"cashonhand_description='"+cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),2)+"',"
            +"cashonhand_5000='"+cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),3)+"',"
            +"cashonhand_2000='"+cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),4)+"',"
            +"cashonhand_1000='"+cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),5)+"',"
            +"cashonhand_500='"+cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),6)+"',"
            +"cashonhand_100='"+cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),7)+"',"
            +"cashonhand_50='"+cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),8)+"',"
            +"cashonhand_20='"+cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),9)+"' where cashonhandupdate_id='"+id+"'";
            PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);

            int c = JOptionPane.showConfirmDialog(this, "Are you sure you want to change?","",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
            if(c==0){
                boolean r = p.execute();
                if(!r){
                    JOptionPane.showMessageDialog(this, "Updated");
                    formWindowOpened(null);
                    cashOnHandChart.clear();
                    lineChart();
            
                }else{
                    JOptionPane.showMessageDialog(this, "Error! Try Again.");
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // delete the selected data
        int id= Integer.parseInt(cashOnHandUpdateTable.getValueAt(cashOnHandUpdateTable.getSelectedRow(),0).toString());
        try {
            DatabaseConnection.getInstance().connectToDatabase();
            String sql = "delete FROM cashonhandupdate where cashonhandupdate_id="+"'"+id+"'";
            PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);

            int c = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?","Warning",JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(c==0){
                if(!p.execute()){
                    formWindowOpened(null);
                    cashOnHandChart.clear();
                    lineChart();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // add data to the Assets Groth Table
        try {
            DatabaseConnection.getInstance().connectToDatabase();
            String sql = "SELECT * FROM cashonhandupdate order by cashonhandupdate_date ASC";
            PreparedStatement p = DatabaseConnection.getInstance().getConnection().prepareStatement(sql);
            ResultSet r = p.executeQuery();

            // Create a list to hold the data rows with the additional column
            List<String[]> rowData = new ArrayList<>();

            while (r.next()) {
                int id = r.getInt("cashonhandupdate_id");
                Date date = r.getDate("cashonhandupdate_date");
                String description = r.getString("cashonhand_description");
                int note5000 = r.getInt("cashonhand_5000");
                int note2000 = r.getInt("cashonhand_2000");
                int note1000 = r.getInt("cashonhand_1000");
                int note500 = r.getInt("cashonhand_500");
                int note100 = r.getInt("cashonhand_100");
                int note50 = r.getInt("cashonhand_50");
                int note20 = r.getInt("cashonhand_20");
                
                double total = (note5000*5000)+(note2000*2000)+(note1000*1000)+(note500*500)+(note100*100)+(note50*50)+(note20*20);
                
                // Create a DecimalFormat instance with the desired format pattern
                DecimalFormat df = new DecimalFormat("#.##");
                String formattedTotal = df.format(total);
                
                rowData.add(new String[]{String.valueOf(id), String.valueOf(date), description, String.valueOf(note5000), String.valueOf(note2000), String.valueOf(note1000)
                        , String.valueOf(note500), String.valueOf(note100), String.valueOf(note50), String.valueOf(note20), String.valueOf(formattedTotal)});
            }

            String[] columnName = {"ID", "Date", "Description", "Rs. 5000", "Rs. 2000", "Rs. 1000", "Rs. 500", "Rs. 100", "Rs. 50", "Rs. 20", "Total"}; 
            DefaultTableModel model = (DefaultTableModel) cashOnHandUpdateTable.getModel();
            model.setDataVector(rowData.toArray(new String[0][]), columnName);
            
            DefaultTableModel newModel = new DefaultTableModel(rowData.toArray(new String[0][]), columnName) {
                // Override isCellEditable to make the "Percentage" column non-editable
                @Override
                public boolean isCellEditable(int row, int column) {
                    // Return false for the "Percentage" column (column 10)
                    return column != 10;
                }
            };
            cashOnHandUpdateTable.setModel(newModel);
            
            // Hide the "ID" column by setting its width to 0
            TableColumn idColumn = cashOnHandUpdateTable.getColumnModel().getColumn(0);
            idColumn.setMinWidth(0);
            idColumn.setMaxWidth(0);
            idColumn.setPreferredWidth(0);
            idColumn.setResizable(false);
            
            // Add an empty row
            String[] emptyRow = {"", "", "", "", "", "", "", "", ""};
            //rowData.add(emptyRow);
            newModel.addRow(emptyRow);
            
            cashOnHandUpdateTable.getColumnModel().getColumn(1).setCellEditor(new JDateChooserEditor(new JCheckBox()));
            
            // Notify observers
            notifyObservers();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CashOnHandUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CashOnHandUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CashOnHandUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CashOnHandUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CashOnHandUpdate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private chart.CurveLineChart cashOnHandChart;
    private javax.swing.JPanel cashOnHandUpdate;
    private javax.swing.JTable cashOnHandUpdateTable;
    private javax.swing.JButton delete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}

class JDateChooserEditor extends DefaultCellEditor{
  
  private JDateChooser dateChooser;
  public JDateChooserEditor(JCheckBox checkBox)
  {
    super(checkBox);
    dateChooser = new JDateChooser();
    dateChooser.setDateFormatString("yyyy-MM-dd");
    
  }

  JDateChooser date;
  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) 
  {
        if (value instanceof String) {
            try {
                dateChooser.setDate(new java.text.SimpleDateFormat("yyyy-MM-dd").parse((String) value));
            } catch (java.text.ParseException e) {
                e.printStackTrace();
            }
        }
        return dateChooser;
  }

  public Object getCellEditorValue() 
  {
            if (dateChooser.getDate() != null) {
            return new java.text.SimpleDateFormat("yyyy-MM-dd").format(dateChooser.getDate());
        } else {
            return super.getCellEditorValue();
        }
  }

    public boolean stopCellEditing() {
        if (dateChooser.getDate() != null) {
            return super.stopCellEditing();
        } else {
            return false;
        }
    }

  protected void fireEditingStopped() {
    super.fireEditingStopped();
  }
}

class CustomJDateChooser extends JDateChooser {

    public CustomJDateChooser() {
        super();
    }

    public CustomJDateChooser(String dateFormat) {
        super();
        this.setDateFormatString(dateFormat);
    }

    public Dimension getCalendarPreferredSize() {
        return new Dimension(300, 200); // Customize the size as per your requirement
    }

    @Override
    public void setPreferredSize(Dimension preferredSize) {
        super.setPreferredSize(preferredSize);

        // Modify the preferred size of the popup calendar
        try {
            Field popupField = JDateChooser.class.getDeclaredField("datePopupMenu");
            popupField.setAccessible(true);
            JPopupMenu popupMenu = (JPopupMenu) popupField.get(this);
            if (popupMenu != null) {
                popupMenu.setPreferredSize(preferredSize);
                popupMenu.setMaximumSize(preferredSize);
            }
        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }
    }
}

